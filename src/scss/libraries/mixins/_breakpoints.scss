////
/// @group breakpoint
////

/// Breakpoint manager
/// @param {String} $breakpoint - Put the size to do the breakpoint. Accepted
/// strings [small|medium|large|extra-large]. Remember that this breakpoint
/// mixin ir **mobile first**.
/// @see $breakpoints
/// @link https://www.sitepoint.com/managing-responsive-breakpoints-sass/
/// @example scss - Usage
///   .foo {
///     width: 300px;
///     @include breackpoint(medium) {
///       width: 100px;
///     }
///   }
/// @example css - Output
///   .foo {
///     width: 300px;
///   }
///   @media (min-width:800px){
///     .foo {
///       width: 100px;
///     }
///   }
@mixin breakpoint($breakpoint) {
	$value: map-get($breakpoints, $breakpoint) !global;

	// If the key exists in the map
	@if $value != null {
		// Prints a media query based on the value
		@media (min-width: $value) {
			@content;
		}
	}
	@else { // If the key doesn't exist in the map
		@error 'No value could be retrieved from `#{$breakpoint}`. Make sure it is defined in `$breakpoints` map.';
	}
}

/// Inverted reakpoint manager
/// @param {String} $breakpoint - Put the size to do the breakpoint. Accepted
/// strings [small|medium|large|extra-large].
/// @see $breakpoints
/// @link https://www.sitepoint.com/managing-responsive-breakpoints-sass/
/// @example scss - Usage
///   .foo {
///     width: 300px;
///     @include breackpoint-down(medium) {
///       width: 100px;
///     }
///   }
/// @example css - Output
///   .foo {
///     width: 300px;
///   }
///   @media (max-width:800px){
///     .foo {
///       width: 100px;
///     }
///   }
@mixin breakpoint-down($breakpoint) {
	$value: map-get($breakpoints, $breakpoint) !global;

	// If the key exists in the map
	@if $value != null {
		// Prints a media query based on the value
		@media (max-width: $value) {
			@content;
		}
	}
	@else { // If the key doesn't exist in the map
		@error 'No value could be retrieved from `#{$breakpoint}`. Make sure it is defined in `$breakpoints` map.';
	}
}
