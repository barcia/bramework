////
/// @group property
////

/// Specify the element size. Is only put one, the element is square
/// @param {units} $width - The width
/// @param {units} $height [$width] - The height
/// @example scss - Usage
///   .foo {
///     @include size(30px, 50px);
///   }
/// @example scss - Usage to square element
///   .foo {
///     @include size(30px);
///   }
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

/// Makes a circular element (with possibilities to expand in one axis)
/// @param {units} $size - The element size
/// @example scss - Usage
///   .foo {
///     @include circle(30px);
///   }
@mixin circle($size) {
	width: $size;
	height: $size;
	border-radius: $size;
}


/// Makes circular an element
/// @example scss - Usage
///   .foo {
///     @include rounded;
///   }
@mixin rounded {
	border-radius: 50%;
}

/// Border top radius
/// @param {Units} $radius [$border-radius] - The border radius in px.
/// @example scss - Usage
///   .foo {
///     @include border-top-radius(3px);
///   }
@mixin border-top-radius($radius: $border-radius) {
	border-top-right-radius: $radius;
	border-top-left-radius: $radius;
}

/// Border bottom radius
/// @param {Units} $radius [$border-radius] - The border radius in px.
/// @example scss - Usage
///   .foo {
///     @include border-bottom-radius(3px);
///   }
@mixin border-bottom-radius($radius: $border-radius) {
	border-bottom-right-radius: $radius;
	border-bottom-left-radius: $radius;
}

/// Border left radius
/// @param {Units} $radius [$border-radius] - The border radius in px.
/// @example scss - Usage
///   .foo {
///     @include border-left-radius(3px);
///   }
@mixin border-left-radius($radius: $border-radius) {
	border-bottom-left-radius: $radius;
	border-top-left-radius: $radius;
}

/// Border right radius
/// @param {Units} $radius [$border-radius] - The border radius in px.
/// @example scss - Usage
///   .foo {
///     @include border-right-radius(3px);
///   }
@mixin border-right-radius($radius: $border-radius) {
	border-top-right-radius: $radius;
	border-bottom-right-radius: $radius;
}







/// Horizontal margin
/// @param {Units} $px - The margin in px.
@mixin margin-hz($px) {
	margin-right: $px;
	margin-left: $px;
}

/// Vertical margin
/// @param {Units} $px - The margin in px.
@mixin margin-vt($px) {
	margin-top: $px;
	margin-bottom: $px;
}

/// Horizontal padding
/// @param {Units} $px - The margin in px.
@mixin padding-hz($px) {
	padding-right: $px;
	padding-left: $px;
}

/// Vertical padding
/// @param {Units} $px - The margin in px.
@mixin padding-vt($px) {
	padding-top: $px;
	padding-bottom: $px;
}


/// Margin bottom except in last item
/// @param {Units} $size [base] - The size of the margin in px.
@mixin margin-bottom($size: base) {
	@if $size == base {
		margin-bottom: $margin-base-bottom;
	}
	@else {
		margin-bottom: $size;
	}

	&:last-child {
		margin-bottom: 0;
	}
}
